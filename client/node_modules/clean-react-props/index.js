'use strict';

exports.__esModule = true;
exports.ValidEvents = exports.SVGProps = exports.RDFProps = exports.HTMLProps = exports.cleanSVGProps = undefined;

var _constants = require('./constants');

var DataRegex = /data-([a-zA-Z0-9\-]*)/;
var AriaRegex = /aria-([a-zA-Z0-9\-]*)/;

/**
 * Return an object containing the valid props to apply to an HTMLElement.
 *
 * @param {Object} props
 * @return {Object}
 */
var cleanProps = function cleanProps() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var excludes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var returnProps = Object.assign({}, props);
  var validProps = Object.keys(returnProps).filter(function (key) {
    if (excludes.indexOf(key) !== -1) {
      return false;
    }

    if (_constants.HTMLProps.indexOf(key) !== -1) {
      return true;
    }

    if (_constants.RDFProps.indexOf(key) !== -1) {
      return true;
    }

    if (DataRegex.test(key)) {
      return true;
    }

    if (AriaRegex.test(key)) {
      return true;
    }

    if (_constants.ValidEvents.indexOf(key) !== -1) {
      return true;
    }

    return false;
  });

  Object.keys(returnProps).forEach(function (key) {
    if (validProps.indexOf(key) === -1) {
      delete returnProps[key];
    }
  });

  return returnProps;
};

/**
 * Return an object containing the valid props to apply to an SVGElement.
 *
 * @param {Object} props
 * @param {Object}
 */
var cleanSVGProps = exports.cleanSVGProps = function cleanSVGProps() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var excludes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var returnProps = Object.assign({}, props);
  var validProps = Object.keys(returnProps).filter(function (key) {
    if (excludes.indexOf(key) !== -1) {
      return false;
    }

    if (_constants.SVGProps.indexOf(key) !== -1) {
      return true;
    }

    return false;
  });

  Object.keys(returnProps).forEach(function (key) {
    if (validProps.indexOf(key) === -1) {
      delete returnProps[key];
    }
  });

  return returnProps;
};

// Exports ___________________________________________________________________

exports.HTMLProps = _constants.HTMLProps;
exports.RDFProps = _constants.RDFProps;
exports.SVGProps = _constants.SVGProps;
exports.ValidEvents = _constants.ValidEvents;
exports.default = cleanProps;