'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _playerController = require('./playerController');

var _playerController2 = _interopRequireDefault(_playerController);

var _YouTubeEmbed = require('./embeds/YouTubeEmbed');

var _YouTubeEmbed2 = _interopRequireDefault(_YouTubeEmbed);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var YouTubePlayer = function (_Component) {
  _inherits(YouTubePlayer, _Component);

  function YouTubePlayer() {
    _classCallCheck(this, YouTubePlayer);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  YouTubePlayer.prototype.render = function render() {
    var aspectRatio = this.props.aspectRatio;


    var style = {};

    if (aspectRatio) {
      var _aspectRatio$split = aspectRatio.split(':'),
          width = _aspectRatio$split[0],
          height = _aspectRatio$split[1];

      style = {
        position: 'relative',
        height: 0,
        paddingBottom: height / width * 100 + '%'
      };
    }

    return _react2.default.createElement(_YouTubeEmbed2.default, _extends({}, this.props, { style: style }));
  };

  return YouTubePlayer;
}(_react.Component);

YouTubePlayer.propTypes = {
  aspectRatio: _propTypes2.default.string,
  loop: _propTypes2.default.bool,
  play: _propTypes2.default.bool,
  time: _propTypes2.default.number,
  volume: _propTypes2.default.number,
  onEnded: _propTypes2.default.func,
  onError: _propTypes2.default.func,
  onPause: _propTypes2.default.func,
  onPlay: _propTypes2.default.func,
  onReady: _propTypes2.default.func,
  onTimeUpdate: _propTypes2.default.func,
  onVolumeChange: _propTypes2.default.func
};

YouTubePlayer.defaultProps = {
  aspectRatio: '16:9',
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {},
  onVolumeChange: function onVolumeChange() {}
};

exports.default = (0, _playerController2.default)(YouTubePlayer);