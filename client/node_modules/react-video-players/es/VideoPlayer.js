var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import playerController from './playerController';
import VideoEmbed from './embeds/VideoEmbed';

var VideoPlayer = function (_Component) {
  _inherits(VideoPlayer, _Component);

  function VideoPlayer() {
    _classCallCheck(this, VideoPlayer);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  VideoPlayer.prototype.render = function render() {
    var aspectRatio = this.props.aspectRatio;


    var style = {};

    if (aspectRatio) {
      var _aspectRatio$split = aspectRatio.split(':'),
          width = _aspectRatio$split[0],
          height = _aspectRatio$split[1];

      style = {
        position: 'relative',
        height: 0,
        paddingBottom: height / width * 100 + '%'
      };
    }

    return React.createElement(VideoEmbed, _extends({}, this.props, { style: style }));
  };

  return VideoPlayer;
}(Component);

VideoPlayer.propTypes = {
  aspectRatio: PropTypes.string,
  config: PropTypes.object,
  loop: PropTypes.bool,
  play: PropTypes.bool,
  time: PropTypes.number,
  volume: PropTypes.number,
  onEnded: PropTypes.func,
  onError: PropTypes.func,
  onPause: PropTypes.func,
  onPlay: PropTypes.func,
  onReady: PropTypes.func,
  onTimeUpdate: PropTypes.func,
  onVolumeChange: PropTypes.func
};

VideoPlayer.defaultProps = {
  aspectRatio: '16:9',
  config: {},
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {},
  onVolumeChange: function onVolumeChange() {}
};

export default playerController(VideoPlayer);