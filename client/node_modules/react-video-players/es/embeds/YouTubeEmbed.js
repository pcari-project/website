function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cleanProps from 'clean-react-props';
import Player from 'youtube-player';

export var PlayerStates = {
  UNSTARTED: -1,
  ENDED: 0,
  PLAYING: 1,
  PAUSED: 2,
  BUFFERING: 3,
  VIDEO_CUED: 5
};

var YouTubeEmbed = function (_Component) {
  _inherits(YouTubeEmbed, _Component);

  function YouTubeEmbed(props) {
    _classCallCheck(this, YouTubeEmbed);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.onPlayerError = _this.onPlayerError.bind(_this);
    _this.onPlayerReady = _this.onPlayerReady.bind(_this);
    _this.onPlayerStateChange = _this.onPlayerStateChange.bind(_this);

    _this.playbackInterval = null;
    return _this;
  }

  YouTubeEmbed.prototype.componentDidMount = function componentDidMount() {
    this.createPlayer();
  };

  YouTubeEmbed.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var loop = nextProps.loop,
        play = nextProps.play,
        time = nextProps.time,
        volume = nextProps.volume;


    if (this.props.play !== play) {
      if (play) {
        this.player.playVideo();
      } else {
        this.player.pauseVideo();
      }
    }

    if (this.props.loop !== loop) {
      this.player.setLoop(loop);
    }

    if (this.props.time !== time) {
      this.player.seekTo(time);
    }

    if (this.props.volume !== volume) {
      this.player.setVolume(volume * 100);
    }
  };

  YouTubeEmbed.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
    return false;
  };

  YouTubeEmbed.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.errorListener) {
      this.player.off(this.errorListener);
    }

    if (this.readyListener) {
      this.player.off(this.readyListener);
    }

    if (this.stateChangeListener) {
      this.player.off(this.stateChangeListener);
    }
  };

  YouTubeEmbed.prototype.createPlayer = function createPlayer() {
    var _this2 = this;

    var promise = new Promise(function (resolve, reject) {
      try {
        var _props = _this2.props,
            config = _props.config,
            width = _props.width,
            height = _props.height,
            loop = _props.loop,
            play = _props.play,
            playlist = _props.playlist,
            time = _props.time,
            videoId = _props.videoId,
            volume = _props.volume,
            onReady = _props.onReady;


        Object.assign(config, {
          autoplay: play ? 1 : 0,
          loop: loop ? 1 : 0,
          playlist: playlist
        });

        _this2.player = Player(_this2.refPlayer, {
          playerVars: config,
          height: height,
          videoId: videoId,
          width: width
        });
        _this2.errorListener = _this2.player.on('error', _this2.onPlayerError);
        _this2.readyListener = _this2.player.on('ready', _this2.onPlayerReady);
        _this2.stateChangeListener = _this2.player.on('stateChange', _this2.onPlayerStateChange);

        resolve(_this2.player);
      } catch (err) {
        reject(err);
      }
    });

    return promise;
  };

  YouTubeEmbed.prototype.onPlayerError = function onPlayerError(evt) {
    var onError = this.props.onError;


    switch (evt.data) {
      case 2:
        return onError({
          code: evt.data,
          message: 'Invalid parameter'
        });

      case 5:
        return onError({
          code: evt.data,
          message: 'HTML 5 error'
        });

      case 100:
        return onError({
          code: evt.data,
          message: 'Video not found'
        });

      case 101:
        return onError({
          code: evt.data,
          message: 'Video cannot be played in embedded players'
        });

      // ðŸ–•
      case 150:
        return onError({
          code: evt.data,
          message: 'This error is the same as 101. Itâ€™s just a 101 error in disguise!'
        });

      default:

    }
  };

  YouTubeEmbed.prototype.onPlayerReady = function onPlayerReady() {
    var _props2 = this.props,
        play = _props2.play,
        time = _props2.time,
        volume = _props2.volume,
        onReady = _props2.onReady;


    this.player.setVolume(volume * 100);

    if (play) {
      this.player.playVideo();
      this.player.seekTo(time);
    }

    onReady();
  };

  YouTubeEmbed.prototype.onPlayerStateChange = function onPlayerStateChange(evt) {
    var _this3 = this;

    var _props3 = this.props,
        onEnded = _props3.onEnded,
        onPause = _props3.onPause,
        onPlay = _props3.onPlay,
        onTimeUpdate = _props3.onTimeUpdate;


    var duration = this.player.getDuration();
    var seconds = this.player.getCurrentTime();
    var percent = duration === 0 ? 0 : seconds / duration;

    switch (evt.data) {
      case PlayerStates.UNSTARTED:
        break;

      case PlayerStates.ENDED:
        clearInterval(this.playbackInterval);

        onEnded({
          duration: duration,
          percent: percent,
          seconds: seconds
        });
        break;

      case PlayerStates.PLAYING:
        onPlay({
          duration: duration,
          percent: percent,
          seconds: seconds
        });

        this.playbackInterval = setInterval(function () {
          var intDuration = _this3.player.getDuration();
          var intSeconds = _this3.player.getCurrentTime();
          onTimeUpdate({
            duration: intDuration,
            percent: intDuration === 0 ? 0 : intSeconds / intDuration,
            seconds: intSeconds
          });
        }, 250);
        break;

      case PlayerStates.PAUSED:
        clearInterval(this.playbackInterval);

        onPause({
          duration: duration,
          percent: percent,
          seconds: seconds
        });
        break;

      case PlayerStates.BUFFERING:
        break;

      case PlayerStates.VIDEO_CUED:
        break;

      default:
        break;
    }
  };

  YouTubeEmbed.prototype.render = function render() {
    var _this4 = this;

    var _props4 = this.props,
        children = _props4.children,
        aspectRatio = _props4.aspectRatio;


    var playerStyle = {};

    if (aspectRatio) {
      playerStyle = {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    var omitProps = ['height', 'loop', 'width', 'onEnded', 'onError', 'onPause', 'onPlay', 'onTimeUpdate', 'onVolumeChange'];

    return React.createElement(
      'div',
      cleanProps(this.props, omitProps),
      React.createElement('div', {
        ref: function ref(element) {
          _this4.refPlayer = element;
        },
        style: playerStyle
      }),
      children
    );
  };

  return YouTubeEmbed;
}(Component);

YouTubeEmbed.propTypes = {
  aspectRatio: PropTypes.string,
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  loop: PropTypes.bool,
  play: PropTypes.bool,
  time: PropTypes.number,
  videoId: PropTypes.string,
  volume: PropTypes.number,
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  onEnded: PropTypes.func,
  onError: PropTypes.func,
  onPause: PropTypes.func,
  onPlay: PropTypes.func,
  onReady: PropTypes.func,
  onTimeUpdate: PropTypes.func,
  onVolumeChange: PropTypes.func
};

YouTubeEmbed.defaultProps = {
  aspectRatio: '16:9',
  config: {},
  height: '100%',
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  width: '100%',
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {},
  onVolumeChange: function onVolumeChange() {}
};

export default YouTubeEmbed;