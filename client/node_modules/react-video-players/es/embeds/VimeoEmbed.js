function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cleanProps from 'clean-react-props';
import Player from '@vimeo/player';

var VimeoEmbed = function (_Component) {
  _inherits(VimeoEmbed, _Component);

  function VimeoEmbed(props) {
    _classCallCheck(this, VimeoEmbed);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.onPlayerReady = _this.onPlayerReady.bind(_this);
    return _this;
  }

  VimeoEmbed.prototype.componentDidMount = function componentDidMount() {
    this.createPlayer();
  };

  VimeoEmbed.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var loop = nextProps.loop,
        play = nextProps.play,
        time = nextProps.time,
        volume = nextProps.volume;


    if (this.props.play !== play) {
      if (play) {
        this.player.play();
      } else {
        this.player.pause();
      }
    }

    if (this.props.loop !== loop) {
      this.player.setLoop(loop);
    }

    if (this.props.time !== time) {
      this.player.setCurrentTime(time);
    }

    if (this.props.volume !== volume) {
      this.player.setVolume(volume);
    }
  };

  VimeoEmbed.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
    return false;
  };

  VimeoEmbed.prototype.componentWillUnmount = function componentWillUnmount() {
    var _props = this.props,
        onEnded = _props.onEnded,
        onPlay = _props.onPlay,
        onTimeUpdate = _props.onTimeUpdate,
        onVolumeChange = _props.onVolumeChange;


    this.player.off('play', onPlay);
    this.player.off('ended', onEnded);
    this.player.off('timeupdate', onTimeUpdate);
    this.player.off('volumechange', onVolumeChange);
  };

  VimeoEmbed.prototype.createPlayer = function createPlayer() {
    var _props2 = this.props,
        config = _props2.config,
        height = _props2.height,
        videoId = _props2.videoId,
        videoUrl = _props2.videoUrl,
        width = _props2.width,
        onEnded = _props2.onEnded,
        onError = _props2.onError,
        onPause = _props2.onPause,
        onPlay = _props2.onPlay,
        onTimeUpdate = _props2.onTimeUpdate,
        onVolumeChange = _props2.onVolumeChange;


    Object.assign(config, videoId ? { id: videoId } : {}, videoUrl ? { url: videoUrl } : {}, { height: height, width: width });

    this.player = new Player(this.refPlayer, config);
    this.player.on('ended', onEnded);
    this.player.on('error', onError);
    this.player.on('pause', onPause);
    this.player.on('play', onPlay);
    this.player.on('timeupdate', onTimeUpdate);
    this.player.on('volumechange', onVolumeChange);

    this.player.ready().then(this.onPlayerReady);

    return Promise.resolve(this.player);
  };

  VimeoEmbed.prototype.onPlayerReady = function onPlayerReady() {
    var _props3 = this.props,
        height = _props3.height,
        play = _props3.play,
        time = _props3.time,
        volume = _props3.volume,
        width = _props3.width,
        onReady = _props3.onReady;


    var iframe = this.refPlayer.querySelector('iframe');
    iframe.width = width;
    iframe.height = height;

    this.player.setVolume(volume);

    if (play) {
      this.player.play();
      this.player.setCurrentTime(time);
    }

    onReady();
  };

  VimeoEmbed.prototype.render = function render() {
    var _this2 = this;

    var _props4 = this.props,
        aspectRatio = _props4.aspectRatio,
        children = _props4.children;


    var playerStyle = {};

    if (aspectRatio) {
      playerStyle = {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    var omitProps = ['height', 'loop', 'width', 'onEnded', 'onError', 'onPause', 'onPlay', 'onTimeUpdate', 'onVolumeChange'];

    return React.createElement(
      'div',
      cleanProps(this.props, omitProps),
      React.createElement('div', {
        ref: function ref(element) {
          _this2.refPlayer = element;
        },
        style: playerStyle
      }),
      children
    );
  };

  return VimeoEmbed;
}(Component);

VimeoEmbed.propTypes = {
  aspectRatio: PropTypes.string,
  config: PropTypes.object,
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  loop: PropTypes.bool,
  play: PropTypes.bool,
  time: PropTypes.number,
  videoId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  videoUrl: PropTypes.string,
  volume: PropTypes.number,
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  onEnded: PropTypes.func,
  onError: PropTypes.func,
  onPause: PropTypes.func,
  onPlay: PropTypes.func,
  onReady: PropTypes.func,
  onTimeUpdate: PropTypes.func,
  onVolumeChange: PropTypes.func
};

VimeoEmbed.defaultProps = {
  aspectRatio: '16:9',
  config: {},
  height: '100%',
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  width: '100%',
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {},
  onVolumeChange: function onVolumeChange() {}
};

export default VimeoEmbed;