'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanReactProps = require('clean-react-props');

var _cleanReactProps2 = _interopRequireDefault(_cleanReactProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VideoEmbed = function (_Component) {
  _inherits(VideoEmbed, _Component);

  function VideoEmbed(props) {
    _classCallCheck(this, VideoEmbed);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.onEnded = _this.onEnded.bind(_this);
    _this.onError = _this.onError.bind(_this);
    _this.onLoadedMetadata = _this.onLoadedMetadata.bind(_this);
    _this.onPause = _this.onPause.bind(_this);
    _this.onPlay = _this.onPlay.bind(_this);
    _this.onTimeUpdate = _this.onTimeUpdate.bind(_this);
    _this.onVolumeChange = _this.onVolumeChange.bind(_this);
    return _this;
  }

  VideoEmbed.prototype.componentDidMount = function componentDidMount() {
    var _props = this.props,
        play = _props.play,
        time = _props.time,
        volume = _props.volume,
        onReady = _props.onReady;


    this.player = this.refPlayer;
    this.player.addEventListener('ended', this.onEnded);
    this.player.addEventListener('error', this.onError);
    this.player.addEventListener('loadedmetadata', this.onLoadedMetadata);
    this.player.addEventListener('pause', this.onPause);
    this.player.addEventListener('play', this.onPlay);
    this.player.addEventListener('timeupdate', this.onTimeUpdate);
    this.player.addEventListener('volumechange', this.onVolumeChange);

    onReady();

    if (play) {
      this.player.play();
    }
  };

  VideoEmbed.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var loop = nextProps.loop,
        play = nextProps.play,
        time = nextProps.time,
        src = nextProps.src,
        volume = nextProps.volume;


    if (this.props.src !== src) {
      this.player.setAttribute('src', src);
    }

    if (this.props.play !== play) {
      if (play) {
        this.player.play();
      } else {
        this.player.pause();
      }
    }

    if (this.props.loop !== loop) {
      this.player.setAttribute('loop', loop);
    }

    if (this.props.time !== time) {
      this.player.setAttribute('currentTime', time);
    }

    if (this.props.volume !== volume) {
      this.player.setAttribute('volume', volume);
    }
  };

  VideoEmbed.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
    return false;
  };

  VideoEmbed.prototype.componentWillUnmount = function componentWillUnmount() {
    this.player.removeEventListener('ended', this.onEnded);
    this.player.removeEventListener('error', this.onError);
    this.player.removeEventListener('loadedmetadata', this.onLoadedMetadata);
    this.player.removeEventListener('pause', this.onPause);
    this.player.removeEventListener('play', this.onPlay);
    this.player.removeEventListener('timeupdate', this.onTimeUpdate);
    this.player.removeEventListener('volumechange', this.onVolumeChange);
  };

  VideoEmbed.prototype.getCurrentStatus = function getCurrentStatus() {
    return {
      duration: !isNaN(this.player.duration) ? this.player.duration : 0,
      percent: !isNaN(this.player.duration) ? (!isNaN(this.player.currentTime) ? this.player.currentTime : 0) / this.player.duration : 0,
      seconds: !isNaN(this.player.currentTime) ? this.player.currentTime : 0
    };
  };

  VideoEmbed.prototype.onEnded = function onEnded(evt) {
    var onEnded = this.props.onEnded;


    onEnded(this.getCurrentStatus());
  };

  VideoEmbed.prototype.onError = function onError(evt) {
    var onError = this.props.onError;


    onError(this.player.error);
  };

  VideoEmbed.prototype.onLoadedMetadata = function onLoadedMetadata() {
    var _props2 = this.props,
        time = _props2.time,
        volume = _props2.volume;


    this.player.currentTime = time;
    this.player.volume = volume;
  };

  VideoEmbed.prototype.onPause = function onPause(evt) {
    var onPause = this.props.onPause;


    onPause();
  };

  VideoEmbed.prototype.onPlay = function onPlay(evt) {
    var onPlay = this.props.onPlay;


    onPlay(this.getCurrentStatus());
  };

  VideoEmbed.prototype.onTimeUpdate = function onTimeUpdate(evt) {
    var onTimeUpdate = this.props.onTimeUpdate;


    onTimeUpdate(this.getCurrentStatus());
  };

  VideoEmbed.prototype.onVolumeChange = function onVolumeChange(evt) {
    var onVolumeChange = this.props.onVolumeChange;


    onVolumeChange({
      volume: evt.target.volume
    });
  };

  VideoEmbed.prototype.render = function render() {
    var _this2 = this;

    var _props3 = this.props,
        aspectRatio = _props3.aspectRatio,
        children = _props3.children,
        config = _props3.config,
        loop = _props3.loop,
        src = _props3.src;


    var playerStyle = {};

    if (aspectRatio) {
      playerStyle = {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    var omitProps = ['height', 'loop', 'src', 'width', 'onEnded', 'onError', 'onPause', 'onPlay', 'onTimeUpdate', 'onVolumeChange'];

    return _react2.default.createElement(
      'div',
      (0, _cleanReactProps2.default)(this.props, omitProps),
      _react2.default.createElement('video', _extends({}, config, {
        height: '100%',
        loop: loop,
        ref: function ref(element) {
          _this2.refPlayer = element;
        },
        src: src,
        style: playerStyle,
        width: '100%'
      })),
      children
    );
  };

  return VideoEmbed;
}(_react.Component);

VideoEmbed.propTypes = {
  aspectRatio: _propTypes2.default.string,
  config: _propTypes2.default.object,
  height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  loop: _propTypes2.default.bool,
  play: _propTypes2.default.bool,
  src: _propTypes2.default.string,
  time: _propTypes2.default.number,
  volume: _propTypes2.default.number,
  width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  onEnded: _propTypes2.default.func,
  onError: _propTypes2.default.func,
  onPause: _propTypes2.default.func,
  onPlay: _propTypes2.default.func,
  onReady: _propTypes2.default.func,
  onTimeUpdate: _propTypes2.default.func
};

VideoEmbed.defaultProps = {
  aspectRatio: '16:9',
  height: '100%',
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  width: '100%',
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {}
};

exports.default = VideoEmbed;