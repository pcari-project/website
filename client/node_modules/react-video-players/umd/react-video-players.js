/*! react-video-players v0.1.10 | (c) 2017 Ryan Hefner | MIT License | https://github.com/ryanhefner/react-video-players !*/
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('@vimeo/player'), require('youtube-player')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react', '@vimeo/player', 'youtube-player'], factory) :
	(factory((global['react-video-players'] = {}),global.React,global.Player,global.Player));
}(this, (function (exports,React,Player,Player$1) { 'use strict';

var React__default = 'default' in React ? React['default'] : React;
Player = Player && Player.hasOwnProperty('default') ? Player['default'] : Player;
Player$1 = Player$1 && Player$1.hasOwnProperty('default') ? Player$1['default'] : Player$1;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

var emptyFunction_1 = emptyFunction;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

var invariant_1 = invariant;

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction_1;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var warning_1 = warning;

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

if (process.env.NODE_ENV !== 'production') {
  var invariant$1 = invariant_1;
  var warning$1 = warning_1;
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant$1(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        warning$1(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning$1(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

var checkPropTypes_1 = checkPropTypes;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';









var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant_1(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning_1(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction_1.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning_1(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction_1.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning_1(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction_1.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning_1(
          false,
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction_1.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';





var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    invariant_1(
      false,
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
  }
  shim.isRequired = shim;
  function getShim() {
    return shim;
  }
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction_1;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function omit() {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  obj = _extends({}, obj);
  props.forEach(function (prop) {
    obj.hasOwnProperty(prop) && delete obj[prop];
  });

  return obj;
}

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};









var _extends$1 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var playerController = function playerController(PlayerComponent) {
  return function (_Component) {
    inherits(_class, _Component);

    function _class(props) {
      classCallCheck(this, _class);

      var _this = possibleConstructorReturn(this, _Component.call(this, props));

      _this.onControlsPlay = _this.onControlsPlay.bind(_this);
      _this.onControlsPause = _this.onControlsPause.bind(_this);
      _this.onControlsSeek = _this.onControlsSeek.bind(_this);
      _this.onControlsVolumeChange = _this.onControlsVolumeChange.bind(_this);

      _this.onPlayerTimeUpdate = _this.onPlayerTimeUpdate.bind(_this);
      _this.onPlayerVolumeChange = _this.onPlayerVolumeChange.bind(_this);

      _this.state = {
        loop: props.loop,
        play: props.play,
        seekTo: props.time,
        time: props.time,
        volume: props.volume
      };
      return _this;
    }

    _class.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var loop = nextProps.loop,
          play = nextProps.play,
          time = nextProps.time,
          volume = nextProps.volume;


      this.setState({
        seekTo: time,
        loop: loop,
        play: play,
        volume: volume
      });
    };

    _class.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
      /**
       * @todo See if there could be any optimization introduced here. - Ryan
       */
      return true;
    };

    _class.prototype.onControlsPlay = function onControlsPlay() {
      this.setState({
        play: true
      });
    };

    _class.prototype.onControlsPause = function onControlsPause() {
      this.setState({
        play: false
      });
    };

    _class.prototype.onControlsSeek = function onControlsSeek(time) {
      this.setState({
        time: time
      });
    };

    _class.prototype.onControlsVolumeChange = function onControlsVolumeChange(volume) {
      this.setState({
        volume: volume
      });
    };

    _class.prototype.onPlayerTimeUpdate = function onPlayerTimeUpdate(time) {
      this.setState({
        time: time
      });

      if (this.props.onTimeUpdate) {
        this.props.onTimeUpdate(time);
      }
    };

    _class.prototype.onPlayerVolumeChange = function onPlayerVolumeChange(volume) {
      this.setState({
        volume: volume
      });

      if (this.props.onVolumeChange) {
        this.props.onVolumeChange(volume);
      }
    };

    _class.prototype.render = function render() {
      var _props = this.props,
          children = _props.children,
          controls = _props.controls;
      var _state = this.state,
          loop = _state.loop,
          play = _state.play,
          time = _state.time,
          seekTo = _state.seekTo,
          volume = _state.volume;


      var clonedControls = controls ? React__default.cloneElement(controls, {
        loop: loop,
        play: play,
        time: time,
        volume: volume,
        onPause: this.onControlsPause,
        onPlay: this.onControlsPlay,
        onSeek: this.onControlsSeek,
        onVolumeChange: this.onControlsVolumeChange
      }) : null;

      var cleanProps = omit(this.props, ['controls', 'loop', 'play', 'time', 'volume', 'onTimeUpdate', 'onVolumeChange']);

      var cleanState = omit(this.state, ['time']);

      return React__default.createElement(
        PlayerComponent,
        _extends$1({}, cleanProps, cleanState, {
          time: seekTo,
          onTimeUpdate: this.onPlayerTimeUpdate,
          onVolumeChange: this.onPlayerTimeUpdate
        }),
        clonedControls,
        children
      );
    };

    return _class;
  }(React.Component);
};

var HTMLProps = ['accept', 'acceptCharset', 'accessKey', 'action', 'allowFullScreen', 'allowTransparency', 'alt', 'async', 'autoComplete', 'autoFocus', 'autoPlay', 'capture', 'cellPadding', 'cellSpacing', 'challenge', 'charSet', 'checked', 'cite', 'classID', 'className', 'colSpan', 'cols', 'content', 'contentEditable', 'contextMenu', 'controls', 'coords', 'crossOrigin', 'data', 'dateTime', 'default', 'defer', 'dir', 'disabled', 'download', 'draggable', 'encType', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'frameBorder', 'headers', 'height', 'hidden', 'high', 'href', 'hrefLang', 'htmlFor', 'httpEquiv', 'icon', 'id', 'inputMode', 'integrity', 'is', 'keyParams', 'keyType', 'kind', 'label', 'lang', 'list', 'loop', 'low', 'manifest', 'marginHeight', 'marginWidth', 'max', 'maxLength', 'media', 'mediaGroup', 'method', 'min', 'minLength', 'multiple', 'muted', 'name', 'noValidate', 'nonce', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'profile', 'radioGroup', 'readOnly', 'rel', 'required', 'reversed', 'role', 'rowSpan', 'rows', 'sandbox', 'scope', 'scoped', 'scrolling', 'seamless', 'selected', 'shape', 'size', 'sizes', 'span', 'spellCheck', 'src', 'srcDoc', 'srcLang', 'srcSet', 'start', 'step', 'style', 'summary', 'tabIndex', 'target', 'title', 'type', 'useMap', 'value', 'width', 'wmode', 'wrap'];

var RDFProps = ['about', 'datatype', 'inlist', 'prefix', 'property', 'resource', 'typeof', 'vocab'];



var ValidEvents = [
// Clipboard Events
'onCopy', 'onCut', 'onPaste',
// Composition Events
'onCompositionEnd', 'onCompositionStart', 'onCompositionUpdate',
// Keyboard Events
'onKeyDown', 'onKeyPress', 'onKeyUp',
// Focus Events
'onFocus', 'onBlur',
// Form Events
'onChange', 'onInput', 'onSubmit',
// Mouse Events
'onClick', 'onContextMenu', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp',
// Selection Events
'onSelect',
// Touch Events
'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart',
// UI Events
'onScroll',
// Wheel Events
'onWheel',
// Media Events
'onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded', 'onError', 'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting',
// Image Events
'onLoad', 'onError',
// Animation Events
'onAnimationStart', 'onAnimationEnd', 'onAnimationIteration',
// Transition Events
'onTransitionEnd'];

var DataRegex = /data-([a-zA-Z0-9\-]*)/;
var AriaRegex = /aria-([a-zA-Z0-9\-]*)/;

/**
 * Return an object containing the valid props to apply to an HTMLElement.
 *
 * @param {Object} props
 * @return {Object}
 */
var cleanProps = function cleanProps() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var excludes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var returnProps = Object.assign({}, props);
  var validProps = Object.keys(returnProps).filter(function (key) {
    if (excludes.indexOf(key) !== -1) {
      return false;
    }

    if (HTMLProps.indexOf(key) !== -1) {
      return true;
    }

    if (RDFProps.indexOf(key) !== -1) {
      return true;
    }

    if (DataRegex.test(key)) {
      return true;
    }

    if (AriaRegex.test(key)) {
      return true;
    }

    if (ValidEvents.indexOf(key) !== -1) {
      return true;
    }

    return false;
  });

  Object.keys(returnProps).forEach(function (key) {
    if (validProps.indexOf(key) === -1) {
      delete returnProps[key];
    }
  });

  return returnProps;
};

/**
 * Return an object containing the valid props to apply to an SVGElement.
 *
 * @param {Object} props
 * @param {Object}
 */

var VideoEmbed = function (_Component) {
  inherits(VideoEmbed, _Component);

  function VideoEmbed(props) {
    classCallCheck(this, VideoEmbed);

    var _this = possibleConstructorReturn(this, _Component.call(this, props));

    _this.onEnded = _this.onEnded.bind(_this);
    _this.onError = _this.onError.bind(_this);
    _this.onLoadedMetadata = _this.onLoadedMetadata.bind(_this);
    _this.onPause = _this.onPause.bind(_this);
    _this.onPlay = _this.onPlay.bind(_this);
    _this.onTimeUpdate = _this.onTimeUpdate.bind(_this);
    _this.onVolumeChange = _this.onVolumeChange.bind(_this);
    return _this;
  }

  VideoEmbed.prototype.componentDidMount = function componentDidMount() {
    var _props = this.props,
        play = _props.play,
        time = _props.time,
        volume = _props.volume,
        onReady = _props.onReady;


    this.player = this.refPlayer;
    this.player.addEventListener('ended', this.onEnded);
    this.player.addEventListener('error', this.onError);
    this.player.addEventListener('loadedmetadata', this.onLoadedMetadata);
    this.player.addEventListener('pause', this.onPause);
    this.player.addEventListener('play', this.onPlay);
    this.player.addEventListener('timeupdate', this.onTimeUpdate);
    this.player.addEventListener('volumechange', this.onVolumeChange);

    onReady();

    if (play) {
      this.player.play();
    }
  };

  VideoEmbed.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var loop = nextProps.loop,
        play = nextProps.play,
        time = nextProps.time,
        src = nextProps.src,
        volume = nextProps.volume;


    if (this.props.src !== src) {
      this.player.setAttribute('src', src);
    }

    if (this.props.play !== play) {
      if (play) {
        this.player.play();
      } else {
        this.player.pause();
      }
    }

    if (this.props.loop !== loop) {
      this.player.setAttribute('loop', loop);
    }

    if (this.props.time !== time) {
      this.player.setAttribute('currentTime', time);
    }

    if (this.props.volume !== volume) {
      this.player.setAttribute('volume', volume);
    }
  };

  VideoEmbed.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
    return false;
  };

  VideoEmbed.prototype.componentWillUnmount = function componentWillUnmount() {
    this.player.removeEventListener('ended', this.onEnded);
    this.player.removeEventListener('error', this.onError);
    this.player.removeEventListener('loadedmetadata', this.onLoadedMetadata);
    this.player.removeEventListener('pause', this.onPause);
    this.player.removeEventListener('play', this.onPlay);
    this.player.removeEventListener('timeupdate', this.onTimeUpdate);
    this.player.removeEventListener('volumechange', this.onVolumeChange);
  };

  VideoEmbed.prototype.getCurrentStatus = function getCurrentStatus() {
    return {
      duration: !isNaN(this.player.duration) ? this.player.duration : 0,
      percent: !isNaN(this.player.duration) ? (!isNaN(this.player.currentTime) ? this.player.currentTime : 0) / this.player.duration : 0,
      seconds: !isNaN(this.player.currentTime) ? this.player.currentTime : 0
    };
  };

  VideoEmbed.prototype.onEnded = function onEnded(evt) {
    var onEnded = this.props.onEnded;


    onEnded(this.getCurrentStatus());
  };

  VideoEmbed.prototype.onError = function onError(evt) {
    var onError = this.props.onError;


    onError(this.player.error);
  };

  VideoEmbed.prototype.onLoadedMetadata = function onLoadedMetadata() {
    var _props2 = this.props,
        time = _props2.time,
        volume = _props2.volume;


    this.player.currentTime = time;
    this.player.volume = volume;
  };

  VideoEmbed.prototype.onPause = function onPause(evt) {
    var onPause = this.props.onPause;


    onPause();
  };

  VideoEmbed.prototype.onPlay = function onPlay(evt) {
    var onPlay = this.props.onPlay;


    onPlay(this.getCurrentStatus());
  };

  VideoEmbed.prototype.onTimeUpdate = function onTimeUpdate(evt) {
    var onTimeUpdate = this.props.onTimeUpdate;


    onTimeUpdate(this.getCurrentStatus());
  };

  VideoEmbed.prototype.onVolumeChange = function onVolumeChange(evt) {
    var onVolumeChange = this.props.onVolumeChange;


    onVolumeChange({
      volume: evt.target.volume
    });
  };

  VideoEmbed.prototype.render = function render() {
    var _this2 = this;

    var _props3 = this.props,
        aspectRatio = _props3.aspectRatio,
        children = _props3.children,
        config = _props3.config,
        loop = _props3.loop,
        src = _props3.src;


    var playerStyle = {};

    if (aspectRatio) {
      playerStyle = {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    var omitProps = ['height', 'loop', 'src', 'width', 'onEnded', 'onError', 'onPause', 'onPlay', 'onTimeUpdate', 'onVolumeChange'];

    return React__default.createElement(
      'div',
      cleanProps(this.props, omitProps),
      React__default.createElement('video', _extends$1({}, config, {
        height: '100%',
        loop: loop,
        ref: function ref(element) {
          _this2.refPlayer = element;
        },
        src: src,
        style: playerStyle,
        width: '100%'
      })),
      children
    );
  };

  return VideoEmbed;
}(React.Component);

VideoEmbed.propTypes = {
  aspectRatio: propTypes.string,
  config: propTypes.object,
  height: propTypes.oneOfType([propTypes.number, propTypes.string]),
  loop: propTypes.bool,
  play: propTypes.bool,
  src: propTypes.string,
  time: propTypes.number,
  volume: propTypes.number,
  width: propTypes.oneOfType([propTypes.number, propTypes.string]),
  onEnded: propTypes.func,
  onError: propTypes.func,
  onPause: propTypes.func,
  onPlay: propTypes.func,
  onReady: propTypes.func,
  onTimeUpdate: propTypes.func
};

VideoEmbed.defaultProps = {
  aspectRatio: '16:9',
  height: '100%',
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  width: '100%',
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {}
};

var VideoPlayer = function (_Component) {
  inherits(VideoPlayer, _Component);

  function VideoPlayer() {
    classCallCheck(this, VideoPlayer);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  VideoPlayer.prototype.render = function render() {
    var aspectRatio = this.props.aspectRatio;


    var style = {};

    if (aspectRatio) {
      var _aspectRatio$split = aspectRatio.split(':'),
          width = _aspectRatio$split[0],
          height = _aspectRatio$split[1];

      style = {
        position: 'relative',
        height: 0,
        paddingBottom: height / width * 100 + '%'
      };
    }

    return React__default.createElement(VideoEmbed, _extends$1({}, this.props, { style: style }));
  };

  return VideoPlayer;
}(React.Component);

VideoPlayer.propTypes = {
  aspectRatio: propTypes.string,
  config: propTypes.object,
  loop: propTypes.bool,
  play: propTypes.bool,
  time: propTypes.number,
  volume: propTypes.number,
  onEnded: propTypes.func,
  onError: propTypes.func,
  onPause: propTypes.func,
  onPlay: propTypes.func,
  onReady: propTypes.func,
  onTimeUpdate: propTypes.func,
  onVolumeChange: propTypes.func
};

VideoPlayer.defaultProps = {
  aspectRatio: '16:9',
  config: {},
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {},
  onVolumeChange: function onVolumeChange() {}
};

var VideoPlayer$1 = playerController(VideoPlayer);

var VimeoEmbed = function (_Component) {
  inherits(VimeoEmbed, _Component);

  function VimeoEmbed(props) {
    classCallCheck(this, VimeoEmbed);

    var _this = possibleConstructorReturn(this, _Component.call(this, props));

    _this.onPlayerReady = _this.onPlayerReady.bind(_this);
    return _this;
  }

  VimeoEmbed.prototype.componentDidMount = function componentDidMount() {
    this.createPlayer();
  };

  VimeoEmbed.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var loop = nextProps.loop,
        play = nextProps.play,
        time = nextProps.time,
        volume = nextProps.volume;


    if (this.props.play !== play) {
      if (play) {
        this.player.play();
      } else {
        this.player.pause();
      }
    }

    if (this.props.loop !== loop) {
      this.player.setLoop(loop);
    }

    if (this.props.time !== time) {
      this.player.setCurrentTime(time);
    }

    if (this.props.volume !== volume) {
      this.player.setVolume(volume);
    }
  };

  VimeoEmbed.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
    return false;
  };

  VimeoEmbed.prototype.componentWillUnmount = function componentWillUnmount() {
    var _props = this.props,
        onEnded = _props.onEnded,
        onPlay = _props.onPlay,
        onTimeUpdate = _props.onTimeUpdate,
        onVolumeChange = _props.onVolumeChange;


    this.player.off('play', onPlay);
    this.player.off('ended', onEnded);
    this.player.off('timeupdate', onTimeUpdate);
    this.player.off('volumechange', onVolumeChange);
  };

  VimeoEmbed.prototype.createPlayer = function createPlayer() {
    var _props2 = this.props,
        config = _props2.config,
        height = _props2.height,
        videoId = _props2.videoId,
        videoUrl = _props2.videoUrl,
        width = _props2.width,
        onEnded = _props2.onEnded,
        onError = _props2.onError,
        onPause = _props2.onPause,
        onPlay = _props2.onPlay,
        onTimeUpdate = _props2.onTimeUpdate,
        onVolumeChange = _props2.onVolumeChange;


    Object.assign(config, videoId ? { id: videoId } : {}, videoUrl ? { url: videoUrl } : {}, { height: height, width: width });

    this.player = new Player(this.refPlayer, config);
    this.player.on('ended', onEnded);
    this.player.on('error', onError);
    this.player.on('pause', onPause);
    this.player.on('play', onPlay);
    this.player.on('timeupdate', onTimeUpdate);
    this.player.on('volumechange', onVolumeChange);

    this.player.ready().then(this.onPlayerReady);

    return Promise.resolve(this.player);
  };

  VimeoEmbed.prototype.onPlayerReady = function onPlayerReady() {
    var _props3 = this.props,
        height = _props3.height,
        play = _props3.play,
        time = _props3.time,
        volume = _props3.volume,
        width = _props3.width,
        onReady = _props3.onReady;


    var iframe = this.refPlayer.querySelector('iframe');
    iframe.width = width;
    iframe.height = height;

    this.player.setVolume(volume);

    if (play) {
      this.player.play();
      this.player.setCurrentTime(time);
    }

    onReady();
  };

  VimeoEmbed.prototype.render = function render() {
    var _this2 = this;

    var _props4 = this.props,
        aspectRatio = _props4.aspectRatio,
        children = _props4.children;


    var playerStyle = {};

    if (aspectRatio) {
      playerStyle = {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    var omitProps = ['height', 'loop', 'width', 'onEnded', 'onError', 'onPause', 'onPlay', 'onTimeUpdate', 'onVolumeChange'];

    return React__default.createElement(
      'div',
      cleanProps(this.props, omitProps),
      React__default.createElement('div', {
        ref: function ref(element) {
          _this2.refPlayer = element;
        },
        style: playerStyle
      }),
      children
    );
  };

  return VimeoEmbed;
}(React.Component);

VimeoEmbed.propTypes = {
  aspectRatio: propTypes.string,
  config: propTypes.object,
  height: propTypes.oneOfType([propTypes.number, propTypes.string]),
  loop: propTypes.bool,
  play: propTypes.bool,
  time: propTypes.number,
  videoId: propTypes.oneOfType([propTypes.number, propTypes.string]),
  videoUrl: propTypes.string,
  volume: propTypes.number,
  width: propTypes.oneOfType([propTypes.number, propTypes.string]),
  onEnded: propTypes.func,
  onError: propTypes.func,
  onPause: propTypes.func,
  onPlay: propTypes.func,
  onReady: propTypes.func,
  onTimeUpdate: propTypes.func,
  onVolumeChange: propTypes.func
};

VimeoEmbed.defaultProps = {
  aspectRatio: '16:9',
  config: {},
  height: '100%',
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  width: '100%',
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {},
  onVolumeChange: function onVolumeChange() {}
};

var VimeoPlayer = function (_Component) {
  inherits(VimeoPlayer, _Component);

  function VimeoPlayer() {
    classCallCheck(this, VimeoPlayer);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  VimeoPlayer.prototype.render = function render() {
    var aspectRatio = this.props.aspectRatio;


    var style = {};

    if (aspectRatio) {
      var _aspectRatio$split = aspectRatio.split(':'),
          width = _aspectRatio$split[0],
          height = _aspectRatio$split[1];

      style = {
        position: 'relative',
        height: 0,
        paddingBottom: height / width * 100 + '%'
      };
    }

    return React__default.createElement(VimeoEmbed, _extends$1({}, this.props, { style: style }));
  };

  return VimeoPlayer;
}(React.Component);

VimeoPlayer.propTypes = {
  aspectRatio: propTypes.string,
  loop: propTypes.bool,
  play: propTypes.bool,
  time: propTypes.number,
  volume: propTypes.number,
  onEnded: propTypes.func,
  onError: propTypes.func,
  onPause: propTypes.func,
  onPlay: propTypes.func,
  onReady: propTypes.func,
  onTimeUpdate: propTypes.func,
  onVolumeChange: propTypes.func
};

VimeoPlayer.defaultProps = {
  aspectRatio: '16:9',
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {},
  onVolumeChange: function onVolumeChange() {}
};

var VimeoPlayer$1 = playerController(VimeoPlayer);

var PlayerStates = {
  UNSTARTED: -1,
  ENDED: 0,
  PLAYING: 1,
  PAUSED: 2,
  BUFFERING: 3,
  VIDEO_CUED: 5
};

var YouTubeEmbed = function (_Component) {
  inherits(YouTubeEmbed, _Component);

  function YouTubeEmbed(props) {
    classCallCheck(this, YouTubeEmbed);

    var _this = possibleConstructorReturn(this, _Component.call(this, props));

    _this.onPlayerError = _this.onPlayerError.bind(_this);
    _this.onPlayerReady = _this.onPlayerReady.bind(_this);
    _this.onPlayerStateChange = _this.onPlayerStateChange.bind(_this);

    _this.playbackInterval = null;
    return _this;
  }

  YouTubeEmbed.prototype.componentDidMount = function componentDidMount() {
    this.createPlayer();
  };

  YouTubeEmbed.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var loop = nextProps.loop,
        play = nextProps.play,
        time = nextProps.time,
        volume = nextProps.volume;


    if (this.props.play !== play) {
      if (play) {
        this.player.playVideo();
      } else {
        this.player.pauseVideo();
      }
    }

    if (this.props.loop !== loop) {
      this.player.setLoop(loop);
    }

    if (this.props.time !== time) {
      this.player.seekTo(time);
    }

    if (this.props.volume !== volume) {
      this.player.setVolume(volume * 100);
    }
  };

  YouTubeEmbed.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
    return false;
  };

  YouTubeEmbed.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.errorListener) {
      this.player.off(this.errorListener);
    }

    if (this.readyListener) {
      this.player.off(this.readyListener);
    }

    if (this.stateChangeListener) {
      this.player.off(this.stateChangeListener);
    }
  };

  YouTubeEmbed.prototype.createPlayer = function createPlayer() {
    var _this2 = this;

    var promise = new Promise(function (resolve, reject) {
      try {
        var _props = _this2.props,
            config = _props.config,
            width = _props.width,
            height = _props.height,
            loop = _props.loop,
            play = _props.play,
            playlist = _props.playlist,
            time = _props.time,
            videoId = _props.videoId;


        Object.assign(config, {
          autoplay: play ? 1 : 0,
          loop: loop ? 1 : 0,
          playlist: playlist
        });

        _this2.player = Player$1(_this2.refPlayer, {
          playerVars: config,
          height: height,
          videoId: videoId,
          width: width
        });
        _this2.errorListener = _this2.player.on('error', _this2.onPlayerError);
        _this2.readyListener = _this2.player.on('ready', _this2.onPlayerReady);
        _this2.stateChangeListener = _this2.player.on('stateChange', _this2.onPlayerStateChange);

        resolve(_this2.player);
      } catch (err) {
        reject(err);
      }
    });

    return promise;
  };

  YouTubeEmbed.prototype.onPlayerError = function onPlayerError(evt) {
    var onError = this.props.onError;


    switch (evt.data) {
      case 2:
        return onError({
          code: evt.data,
          message: 'Invalid parameter'
        });

      case 5:
        return onError({
          code: evt.data,
          message: 'HTML 5 error'
        });

      case 100:
        return onError({
          code: evt.data,
          message: 'Video not found'
        });

      case 101:
        return onError({
          code: evt.data,
          message: 'Video cannot be played in embedded players'
        });

      // 🖕
      case 150:
        return onError({
          code: evt.data,
          message: 'This error is the same as 101. It’s just a 101 error in disguise!'
        });

      default:

    }
  };

  YouTubeEmbed.prototype.onPlayerReady = function onPlayerReady() {
    var _props2 = this.props,
        play = _props2.play,
        time = _props2.time,
        volume = _props2.volume,
        onReady = _props2.onReady;


    this.player.setVolume(volume * 100);

    if (play) {
      this.player.playVideo();
      this.player.seekTo(time);
    }

    onReady();
  };

  YouTubeEmbed.prototype.onPlayerStateChange = function onPlayerStateChange(evt) {
    var _this3 = this;

    var _props3 = this.props,
        onEnded = _props3.onEnded,
        onPause = _props3.onPause,
        onPlay = _props3.onPlay,
        onTimeUpdate = _props3.onTimeUpdate;


    var duration = this.player.getDuration();
    var seconds = this.player.getCurrentTime();
    var percent = duration === 0 ? 0 : seconds / duration;

    switch (evt.data) {
      case PlayerStates.UNSTARTED:
        break;

      case PlayerStates.ENDED:
        clearInterval(this.playbackInterval);

        onEnded({
          duration: duration,
          percent: percent,
          seconds: seconds
        });
        break;

      case PlayerStates.PLAYING:
        onPlay({
          duration: duration,
          percent: percent,
          seconds: seconds
        });

        this.playbackInterval = setInterval(function () {
          var intDuration = _this3.player.getDuration();
          var intSeconds = _this3.player.getCurrentTime();
          onTimeUpdate({
            duration: intDuration,
            percent: intDuration === 0 ? 0 : intSeconds / intDuration,
            seconds: intSeconds
          });
        }, 250);
        break;

      case PlayerStates.PAUSED:
        clearInterval(this.playbackInterval);

        onPause({
          duration: duration,
          percent: percent,
          seconds: seconds
        });
        break;

      case PlayerStates.BUFFERING:
        break;

      case PlayerStates.VIDEO_CUED:
        break;

      default:
        break;
    }
  };

  YouTubeEmbed.prototype.render = function render() {
    var _this4 = this;

    var _props4 = this.props,
        children = _props4.children,
        aspectRatio = _props4.aspectRatio;


    var playerStyle = {};

    if (aspectRatio) {
      playerStyle = {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    var omitProps = ['height', 'loop', 'width', 'onEnded', 'onError', 'onPause', 'onPlay', 'onTimeUpdate', 'onVolumeChange'];

    return React__default.createElement(
      'div',
      cleanProps(this.props, omitProps),
      React__default.createElement('div', {
        ref: function ref(element) {
          _this4.refPlayer = element;
        },
        style: playerStyle
      }),
      children
    );
  };

  return YouTubeEmbed;
}(React.Component);

YouTubeEmbed.propTypes = {
  aspectRatio: propTypes.string,
  height: propTypes.oneOfType([propTypes.number, propTypes.string]),
  loop: propTypes.bool,
  play: propTypes.bool,
  time: propTypes.number,
  videoId: propTypes.string,
  volume: propTypes.number,
  width: propTypes.oneOfType([propTypes.number, propTypes.string]),
  onEnded: propTypes.func,
  onError: propTypes.func,
  onPause: propTypes.func,
  onPlay: propTypes.func,
  onReady: propTypes.func,
  onTimeUpdate: propTypes.func,
  onVolumeChange: propTypes.func
};

YouTubeEmbed.defaultProps = {
  aspectRatio: '16:9',
  config: {},
  height: '100%',
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  width: '100%',
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {},
  onVolumeChange: function onVolumeChange() {}
};

var YouTubePlayer = function (_Component) {
  inherits(YouTubePlayer, _Component);

  function YouTubePlayer() {
    classCallCheck(this, YouTubePlayer);
    return possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  YouTubePlayer.prototype.render = function render() {
    var aspectRatio = this.props.aspectRatio;


    var style = {};

    if (aspectRatio) {
      var _aspectRatio$split = aspectRatio.split(':'),
          width = _aspectRatio$split[0],
          height = _aspectRatio$split[1];

      style = {
        position: 'relative',
        height: 0,
        paddingBottom: height / width * 100 + '%'
      };
    }

    return React__default.createElement(YouTubeEmbed, _extends$1({}, this.props, { style: style }));
  };

  return YouTubePlayer;
}(React.Component);

YouTubePlayer.propTypes = {
  aspectRatio: propTypes.string,
  loop: propTypes.bool,
  play: propTypes.bool,
  time: propTypes.number,
  volume: propTypes.number,
  onEnded: propTypes.func,
  onError: propTypes.func,
  onPause: propTypes.func,
  onPlay: propTypes.func,
  onReady: propTypes.func,
  onTimeUpdate: propTypes.func,
  onVolumeChange: propTypes.func
};

YouTubePlayer.defaultProps = {
  aspectRatio: '16:9',
  loop: false,
  play: false,
  time: 0,
  volume: 1,
  onEnded: function onEnded() {},
  onError: function onError() {},
  onPause: function onPause() {},
  onPlay: function onPlay() {},
  onReady: function onReady() {},
  onTimeUpdate: function onTimeUpdate() {},
  onVolumeChange: function onVolumeChange() {}
};

var YouTubePlayer$1 = playerController(YouTubePlayer);

exports.VideoPlayer = VideoPlayer$1;
exports.VimeoPlayer = VimeoPlayer$1;
exports.YouTubePlayer = YouTubePlayer$1;
exports.playerController = playerController;

Object.defineProperty(exports, '__esModule', { value: true });

})));
/* follow me on Twitter! @ryanhefner */
